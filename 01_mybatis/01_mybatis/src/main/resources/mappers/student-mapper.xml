<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<!-- 
mapper태그에 namespace속성을 설정해야한다.
namespace값은 session 객체가 sql문을 메소드에 의해서 실행할때 사용하는 mapper 구분 값이다.
 -->
<mapper namespace="student">
	<!-- 
	실행할 sql문에 맞는 태그를 선언하면 된다.
	<select>, <insert>, <update>, <delete>
	sql문은 시작 태그와 끝 태그 사이에 작성하고 세미콜론(;)은 사용하지 않는다.
	 -->
	 <insert id="insertStudent">
	 	INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL,'유병승','01012345678','YOO@YOO.COM','경기도 시흥시',DEFAULT)
	 </insert>
	 <!-- 
	 메소드 실행시 매개변수가 있는 경우 sql태그에 parameterType 속성을 이용해서 매개변수 타입을 지정한다.
	 파라미터값은 #{매개변수명}으로 전달 받을 수 있다.
	 내부적으로 PreparedStatement를 사용 중으로 #{}이 위치홀더 역할을 수행한다.
	 대소문자 구분해서 작성해야된다.
	  -->
	 <insert id="insertStudentByName" parameterType="string">
	 	INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL,#{name},'01011112222','TEST@TEST.COM','서울시 양천구',DEFAULT)
	 </insert>
	 <!-- 
	 TYPE을 작성할 때 클래스를 작성하려면 패키지명까지 작성해야한다.
	  -->
	 <insert id="insertStudentAll" parameterType="com.mybatis.model.vo.Student">
	 	INSERT INTO STUDENT VALUES(SEQ_STUDENT.NEXTVAL,#{studentName},#{studentTel},#{studentEmail},#{studentAddress},DEFAULT)
	 </insert>
	 
	 <update id="updateStudent" parameterType="com.mybatis.model.vo.Student">
	 	UPDATE STUDENT SET STUDENT_NAME=#{studentName},STUDENT_TEL=#{studentTel},STUDENT_EMAIL=#{studentEmail},STUDENT_ADDR=#{studentAddress}
	 	WHERE STUDENT_NO=#{studentNo}
	 </update>
	 <delete id="deleteStudent" parameterType="_int">
	 	DELETE FROM STUDENT WHERE STUDENT_NO=#{no}
	 </delete>
	 
	 
	 <!-- 
	 select문 실행하기
	 <select>태그를 이용하고 두 개의 속성을 반드시 작성해야한다.
	 1. id : sql문을 구분해서 지칭할 수 있는 값
	 2. resultType||resultMap : sql문의 실행 결과를 반환할 타입을 지정한다.
	 resultType : java코드로 작성되어있는 타입들. 기본타입, 클래스타입
	 resultMap : mybatis에서 <resultMap>태그를 이용해서 만든 타입
	 * 컬럼명과 매핑할 java 클래스 필드명이 같으면 resultType을 사용하고 다르면 resultMap을 만들어서 직접 매핑해야한다.
	 resultMap은 클래스 간의 연관 관계를 설정했을 때 사용한다.
	  -->
	 <select id="selectStudentCount" resultType="_int">
	 	SELECT COUNT(*) FROM STUDENT
	 </select>
	 <!-- 
	 vo객체와 resultSet에 컬럼명이 불일치할 때 resultMap을 이용해서 매핑시켜준다.
	 <resultMap id="" type="">
	 id : sql 구분자
	 type : 매핑할 객체 타입
	 <id property="타입에 설정된 객체 필트명" column="resultset 컬럼명"> :PK에 설정
	 <result property="타입에 설정된 객체 필트명" column="resultset 컬럼명"> : 일반 컬럼
	 <associtation> : 객체 하나일 때
	 <collection> : 리스트로 객체를 가질때
	  -->
	  <resultMap id="studentMap" type="com.mybatis.model.vo.Student">
	  	<id property="studentNo" column="student_no"/>
	  	<result property="studentName" column="student_name"/>
	  	<result property="studentTel" column="student_tel"/>
	  	<result property="studentEmail" column="student_email"/>
	  	<result property="studentAddress" column="student_addr"/>
	  </resultMap>
	 <select id="selectStudent" parameterType="_int" resultMap="studentMap">
	 	SELECT *
	 	FROM STUDENT WHERE STUDENT_NO=#{no}
	 </select>
	 <select id="selectStudentAll" resultMap="studentMap">
	 	SELECT * FROM STUDENT
	 </select>
	 <select id="selectStudentByName" resultMap="studentMap" parameterType="string">
	 	SELECT * FROM STUDENT WHERE STUDENT_NAME LIKE '%'||#{name}||'%'
	 </select>
	 <select id="selectStudentMap" resultType="map" parameterType="_int">
	 	SELECT * FROM STUDENT WHERE STUDENT_NO=#{no}
	 </select>
	 <select id="selectStudentListMap" resultType="map">
	 	SELECT * FROM STUDENT
	 </select>
	 
	 <select id="selectStudentPage" resultMap="studentMap">
	 <!-- 공통된 페이징처리 구문은 마이바티스가 알아서 처리하기 때문에 핵심이 되는 SELECT문만 작성하면 된다. 가장 안에 작성했던 SELECT문. -->
	 	SELECT * FROM STUDENT
	 </select>
</mapper>
